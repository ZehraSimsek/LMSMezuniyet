"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/victory-brush-line";
exports.ids = ["vendor-chunks/victory-brush-line"];
exports.modules = {

/***/ "(ssr)/./node_modules/victory-brush-line/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/victory-brush-line/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _victoryBrushLine = __webpack_require__(/*! ./victory-brush-line */ \"(ssr)/./node_modules/victory-brush-line/lib/victory-brush-line.js\");\nObject.keys(_victoryBrushLine).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _victoryBrushLine[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _victoryBrushLine[key];\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdmljdG9yeS1icnVzaC1saW5lL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix3QkFBd0IsbUJBQU8sQ0FBQywrRkFBc0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVtcC8uL25vZGVfbW9kdWxlcy92aWN0b3J5LWJydXNoLWxpbmUvbGliL2luZGV4LmpzP2M3MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgX3ZpY3RvcnlCcnVzaExpbmUgPSByZXF1aXJlKFwiLi92aWN0b3J5LWJydXNoLWxpbmVcIik7XG5PYmplY3Qua2V5cyhfdmljdG9yeUJydXNoTGluZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3ZpY3RvcnlCcnVzaExpbmVba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdmljdG9yeUJydXNoTGluZVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/victory-brush-line/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/victory-brush-line/lib/victory-brush-line.js":
/*!*******************************************************************!*\
  !*** ./node_modules/victory-brush-line/lib/victory-brush-line.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.VictoryBrushLine = void 0;\nvar _pick2 = _interopRequireDefault(__webpack_require__(/*! lodash/pick */ \"(ssr)/./node_modules/lodash/pick.js\"));\nvar _defaults2 = _interopRequireDefault(__webpack_require__(/*! lodash/defaults */ \"(ssr)/./node_modules/lodash/defaults.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _victoryCore = __webpack_require__(/*! victory-core */ \"(ssr)/./node_modules/victory-core/lib/index.js\");\nvar _reactFastCompare = _interopRequireDefault(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst SMALL_NUMBER = 1 / Number.MAX_SAFE_INTEGER;\nconst getScale = props => {\n  const {\n    scale = {},\n    dimension = \"x\"\n  } = props;\n  if (scale[dimension]) {\n    return scale[dimension];\n  }\n  const fallbackScale = _victoryCore.Scale.getBaseScale(props, dimension);\n  const range = _victoryCore.Helpers.getRange(props, dimension);\n  const domain = _victoryCore.Domain.getDomainFromProps(props, dimension) || [0, 1];\n  fallbackScale.range(range).domain(domain);\n  return fallbackScale;\n};\nconst getDimension = props => {\n  const {\n    horizontal,\n    dimension = \"x\"\n  } = props;\n  if (!horizontal) {\n    return dimension;\n  }\n  return dimension === \"x\" ? \"y\" : \"x\";\n};\nconst toRange = (props, domain) => {\n  const scale = getScale(props);\n  return [scale(Math.min(...domain)), scale(Math.max(...domain))];\n};\nconst toDomain = (props, range) => {\n  const scale = getScale(props);\n  return [scale.invert(Math.min(...range)), scale.invert(Math.max(...range))];\n};\nconst getFullRange = props => {\n  const scale = getScale(props);\n  return scale.range();\n};\nconst getFullDomain = props => {\n  const scale = getScale(props);\n  return scale.domain();\n};\nconst withinBound = (value, bound) => {\n  return value >= _victoryCore.Collection.getMinValue(bound) && value <= _victoryCore.Collection.getMaxValue(bound);\n};\nconst getBrushDomain = (brushDomain, fullDomain) => {\n  if (brushDomain) {\n    const brushMin = _victoryCore.Collection.getMinValue(brushDomain);\n    const brushMax = _victoryCore.Collection.getMaxValue(brushDomain);\n    const domainMin = _victoryCore.Collection.getMinValue(fullDomain);\n    const domainMax = _victoryCore.Collection.getMaxValue(fullDomain);\n    const defaultMin = brushMin < domainMin ? domainMin : Number(domainMax) - SMALL_NUMBER;\n    const defaultMax = brushMax > domainMax ? domainMax : Number(domainMin) + SMALL_NUMBER;\n    const min = withinBound(brushMin, fullDomain) ? brushMin : defaultMin;\n    const max = withinBound(brushMax, fullDomain) ? brushMax : defaultMax;\n    return [min, max];\n  }\n  return fullDomain;\n};\nconst getActiveHandle = (props, position, range) => {\n  const width = props.handleWidth / 2;\n  const dimension = getDimension(props);\n  const getHandle = type => {\n    const base = {\n      min: dimension === \"x\" ? Math.min(...range) : Math.max(...range),\n      max: dimension === \"x\" ? Math.max(...range) : Math.min(...range)\n    };\n    return [base[type] - width, base[type] + width];\n  };\n  const active = [\"min\", \"max\"].reduce((memo, type) => {\n    memo[type] = withinBound(position, getHandle(type)) ? type : undefined;\n    return memo;\n  }, {});\n  return active.min && active.max ? \"both\" : active.min || active.max;\n};\nconst getMinimumDomain = () => {\n  return [0, SMALL_NUMBER];\n};\nconst panBox = (props, position) => {\n  const {\n    brushDomain,\n    startPosition\n  } = props;\n  const range = toRange(props, brushDomain);\n  const fullRange = getFullRange(props);\n  const size = Math.abs(range[1] - range[0]);\n  const globalMin = Math.min(...fullRange);\n  const globalMax = Math.max(...fullRange);\n  const delta = startPosition ? startPosition - position : 0;\n  const min = Math.min(...range) - delta;\n  const max = Math.max(...range) - delta;\n  const constrainedMin = min > globalMax - size ? globalMax - size : Math.max(min, globalMin);\n  const constrainedMax = max < globalMin + size ? globalMin + size : Math.min(max, globalMax);\n  return [constrainedMin, constrainedMax];\n};\nconst fallbackProps = {\n  brushAreaStyle: {\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: _ref => {\n      let {\n        active\n      } = _ref;\n      return active ? 0.2 : 0.1;\n    } // eslint-disable-line no-magic-numbers\n  },\n  brushStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: _ref2 => {\n      let {\n        active\n      } = _ref2;\n      return active ? 0.4 : 0.3;\n    } // eslint-disable-line no-magic-numbers\n  },\n  handleStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"none\"\n  }\n};\nclass VictoryBrushLine extends _react.default.Component {\n  static defaultProps = {\n    allowDrag: true,\n    allowDraw: true,\n    allowResize: true,\n    brushAreaComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Box, null),\n    brushComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Box, null),\n    groupComponent: /*#__PURE__*/_react.default.createElement(\"g\", null),\n    handleComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Box, null),\n    handleWidth: 10,\n    lineComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.LineSegment, null),\n    width: 10\n  };\n  static defaultEvents = function (props) {\n    return props.disable ? undefined : [{\n      target: props.type,\n      eventHandlers: {\n        onMouseEnter: (evt, targetProps) => {\n          evt.preventDefault();\n          const {\n            allowResize,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n          const parentSVG = targetProps.parentSVG || _victoryCore.Selection.getParentSVG(evt);\n          const position = _victoryCore.Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const fullDomain = getFullDomain(targetProps);\n          const currentDomain = getBrushDomain(brushDomain, fullDomain);\n          const range = toRange(targetProps, currentDomain);\n          const activeHandle = allowResize && getActiveHandle(targetProps, position, range);\n          const activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, range) && !(0, _reactFastCompare.default)(fullDomain, currentDomain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"min\" || activeHandle === \"both\"\n          };\n          return [{\n            mutation: () => ({\n              activeBrushes,\n              brushDomain: targetProps.brushDomain,\n              parentSVG\n            })\n          }];\n        },\n        onMouseDown: (evt, targetProps) => {\n          evt.preventDefault();\n          const {\n            allowResize,\n            allowDrag,\n            allowDraw,\n            activeBrushes,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n\n          // Don't trigger events for static brushes\n          if (!allowResize && !allowDrag) {\n            return [];\n          }\n          const fullDomain = getFullDomain(targetProps);\n          const currentDomain = getBrushDomain(brushDomain, fullDomain);\n          const parentSVG = targetProps.parentSVG || _victoryCore.Selection.getParentSVG(evt);\n          const position = _victoryCore.Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const range = toRange(targetProps, currentDomain);\n          const activeHandle = allowResize && getActiveHandle(targetProps, position, range);\n          // If the event occurs in any of the handle regions, start a resize\n          if (activeHandle) {\n            return [{\n              mutation: () => {\n                return {\n                  parentSVG,\n                  isSelecting: true,\n                  activeHandle,\n                  brushDomain: currentDomain,\n                  startPosition: position,\n                  activeBrushes\n                };\n              }\n            }];\n          } else if (withinBound(position, range) && !(0, _reactFastCompare.default)(fullDomain, currentDomain)) {\n            // if the event occurs within a selected region start a panning event, unless the whole\n            // domain is selected\n            return [{\n              mutation: () => ({\n                isPanning: allowDrag,\n                startPosition: position,\n                brushDomain: currentDomain,\n                activeBrushes,\n                parentSVG\n              })\n            }];\n          }\n          // if the event occurs outside the region, or if the whole domain is selected,\n          // start a new selection\n          return allowDraw ? [{\n            mutation: () => ({\n              isSelecting: allowResize,\n              brushDomain: null,\n              startPosition: position,\n              activeBrushes,\n              parentSVG\n            })\n          }] : [];\n        },\n        // eslint-disable-next-line max-statements, complexity\n        onMouseMove: (evt, targetProps) => {\n          const {\n            isPanning,\n            isSelecting,\n            allowResize,\n            allowDrag,\n            onBrushDomainChange,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n          if (isPanning || isSelecting) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n          const parentSVG = targetProps.parentSVG || _victoryCore.Selection.getParentSVG(evt);\n          const position = _victoryCore.Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const fullDomain = getFullDomain(targetProps);\n          const domain = getBrushDomain(brushDomain, fullDomain);\n          const initialRange = toRange(targetProps, domain);\n          const activeHandle = getActiveHandle(targetProps, position, initialRange);\n          const activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, initialRange) && !(0, _reactFastCompare.default)(fullDomain, domain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"max\" || activeHandle === \"both\"\n          };\n          if (!targetProps.isPanning && !targetProps.isSelecting) {\n            return [{\n              mutation: () => ({\n                activeBrushes,\n                brushDomain: targetProps.brushDomain,\n                parentSVG\n              })\n            }];\n          }\n          if (allowDrag && isPanning) {\n            const fullRange = getFullRange(targetProps);\n            const range = panBox(targetProps, position);\n            const currentDomain = toDomain(targetProps, range);\n            const startPosition = Math.max(...range) >= Math.max(...fullRange) || Math.min(...range) <= Math.min(...fullRange) ? targetProps.startPosition : position;\n            const mutatedProps = {\n              startPosition,\n              isPanning: true,\n              brushDomain: currentDomain,\n              activeBrushes: {\n                brush: true\n              },\n              parentSVG\n            };\n            if (_victoryCore.Helpers.isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(currentDomain, (0, _defaults2.default)({}, mutatedProps, targetProps));\n            }\n            return [{\n              mutation: () => mutatedProps\n            }];\n          } else if (allowResize && isSelecting) {\n            let currentDomain = brushDomain || getMinimumDomain();\n            const range = toRange(targetProps, currentDomain);\n            const oppositeHandle = targetProps.activeHandle === \"min\" ? \"max\" : \"min\";\n            const handle = targetProps.activeHandle && getActiveHandle(targetProps, position, range) === \"both\" ? oppositeHandle : targetProps.activeHandle;\n            if (!handle) {\n              currentDomain = toDomain(targetProps, [targetProps.startPosition, position]);\n            } else {\n              const rangeMax = dimension === \"x\" ? Math.max(...range) : Math.min(...range);\n              const rangeMin = dimension === \"x\" ? Math.min(...range) : Math.max(...range);\n              const min = handle === \"max\" ? rangeMin : position;\n              const max = handle === \"min\" ? rangeMax : position;\n              currentDomain = toDomain(targetProps, [min, max]);\n            }\n            const mutatedProps = {\n              brushDomain: currentDomain,\n              startPosition: targetProps.startPosition,\n              isSelecting,\n              activeHandle: handle,\n              parentSVG,\n              activeBrushes: {\n                brush: true,\n                minHandle: activeHandle === \"min\",\n                maxHandle: activeHandle === \"max\"\n              }\n            };\n            if (_victoryCore.Helpers.isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(currentDomain, (0, _defaults2.default)({}, mutatedProps, targetProps));\n            }\n            return [{\n              mutation: () => mutatedProps\n            }];\n          }\n          return [];\n        },\n        onMouseUp: (evt, targetProps) => {\n          const {\n            onBrushDomainChange,\n            brushDomain,\n            allowResize,\n            activeBrushes\n          } = targetProps;\n          // if the mouse hasn't moved since a mouseDown event, select the whole domain region\n          const mutatedProps = {\n            isPanning: false,\n            isSelecting: false,\n            activeHandle: null,\n            startPosition: null,\n            brushDomain,\n            activeBrushes\n          };\n          if (allowResize && _victoryCore.Helpers.isFunction(onBrushDomainChange)) {\n            onBrushDomainChange(brushDomain, (0, _defaults2.default)({}, mutatedProps, targetProps));\n          }\n          return [{\n            mutation: () => mutatedProps\n          }];\n        },\n        onMouseLeave: (evt, targetProps) => {\n          const {\n            brushDomain\n          } = targetProps;\n          return [{\n            mutation: () => ({\n              isPanning: false,\n              isSelecting: false,\n              activeHandle: null,\n              startPosition: null,\n              brushDomain,\n              activeBrushes: {}\n            })\n          }];\n        }\n      }\n    }];\n  };\n  getRectDimensions(props, brushWidth, domain) {\n    const {\n      brushDomain\n    } = props;\n    const dimension = getDimension(props);\n    const range = toRange(props, domain || getBrushDomain(brushDomain, getFullDomain(props)));\n    const coordinates = dimension === \"x\" ? {\n      y1: props.y1,\n      y2: props.y2,\n      x1: Math.min(...range),\n      x2: Math.max(...range)\n    } : {\n      x1: props.x1,\n      x2: props.x2,\n      y1: Math.min(...range),\n      y2: Math.max(...range)\n    };\n    const {\n      x1,\n      x2,\n      y1,\n      y2\n    } = coordinates;\n    const offset = {\n      x: dimension === \"x\" ? 0 : brushWidth / 2,\n      y: dimension === \"y\" ? 0 : brushWidth / 2\n    };\n    const x = Math.min(x1, x2) - offset.x;\n    const y = Math.min(y1, y2) - offset.y;\n    const width = Math.max(x1, x2) + offset.x - x;\n    const height = Math.max(y1, y2) + offset.y - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n  getHandleDimensions(props) {\n    const {\n      handleWidth,\n      x1,\n      x2,\n      y1,\n      y2,\n      brushDomain\n    } = props;\n    const dimension = getDimension(props);\n    const brushWidth = props.brushWidth || props.width;\n    const domain = getBrushDomain(brushDomain, getFullDomain(props));\n    const range = toRange(props, domain);\n    const defaultX = Math.min(x1, x2) - brushWidth / 2;\n    const defaultY = Math.min(y1, y2) - brushWidth / 2;\n    const x = {\n      min: dimension === \"x\" ? Math.min(...range) - handleWidth / 2 : defaultX,\n      max: dimension === \"x\" ? Math.max(...range) - handleWidth / 2 : defaultX\n    };\n    const y = {\n      min: dimension === \"y\" ? Math.max(...range) - handleWidth / 2 : defaultY,\n      max: dimension === \"y\" ? Math.min(...range) - handleWidth / 2 : defaultY\n    };\n    const width = dimension === \"x\" ? handleWidth : brushWidth;\n    const height = dimension === \"x\" ? brushWidth : handleWidth;\n    return {\n      min: {\n        x: x.min,\n        y: y.min,\n        width,\n        height\n      },\n      max: {\n        x: x.max,\n        y: y.max,\n        width,\n        height\n      }\n    };\n  }\n  getCursor(props) {\n    const {\n      activeBrushes = {}\n    } = props;\n    const dimension = getDimension(props);\n    if (activeBrushes.minHandle || activeBrushes.maxHandle) {\n      return dimension === \"x\" ? \"ew-resize\" : \"ns-resize\";\n    } else if (activeBrushes.brush) {\n      return \"move\";\n    }\n    return \"crosshair\";\n  }\n  renderHandles(props) {\n    const {\n      handleComponent,\n      handleStyle,\n      id,\n      brushDomain,\n      datum = {},\n      activeBrushes = {}\n    } = props;\n    if (!brushDomain) {\n      return null;\n    }\n    const handleDimensions = this.getHandleDimensions(props);\n    const style = Object.assign({}, fallbackProps.handleStyle, handleStyle);\n    const minDatum = Object.assign({\n      handleValue: _victoryCore.Collection.getMinValue(brushDomain)\n    }, datum);\n    const maxDatum = Object.assign({\n      handleValue: _victoryCore.Collection.getMaxValue(brushDomain)\n    }, datum);\n    const minHandleProps = Object.assign({\n      key: `${id}-min`,\n      style: _victoryCore.Helpers.evaluateStyle(style, {\n        datum: minDatum,\n        active: activeBrushes.minHandle\n      })\n    }, handleDimensions.min);\n    const maxHandleProps = Object.assign({\n      key: `${id}-max`,\n      style: _victoryCore.Helpers.evaluateStyle(style, {\n        datum: maxDatum,\n        active: activeBrushes.maxHandle\n      })\n    }, handleDimensions.max);\n    return [/*#__PURE__*/_react.default.cloneElement(handleComponent, minHandleProps), /*#__PURE__*/_react.default.cloneElement(handleComponent, maxHandleProps)];\n  }\n  renderBrush(props) {\n    const {\n      brushComponent,\n      brushStyle,\n      activeBrushes = {},\n      datum = {},\n      brushDomain\n    } = props;\n    if (!brushDomain) {\n      return null;\n    }\n    const brushWidth = props.brushWidth || props.width;\n    const rectDimensions = this.getRectDimensions(props, brushWidth);\n    const baseStyle = Object.assign({}, fallbackProps.brushStyle, brushStyle);\n    const style = _victoryCore.Helpers.evaluateStyle(baseStyle, {\n      datum,\n      active: activeBrushes.brush\n    });\n    const brushProps = Object.assign({\n      style\n    }, rectDimensions);\n    return /*#__PURE__*/_react.default.cloneElement(brushComponent, brushProps);\n  }\n  renderBrushArea(props) {\n    const {\n      brushAreaComponent,\n      brushAreaStyle,\n      activeBrushes = {},\n      datum = {}\n    } = props;\n    const brushAreaWidth = props.brushAreaWidth || props.width;\n    const cursor = this.getCursor(props);\n    const rectDimensions = this.getRectDimensions(props, brushAreaWidth, getFullDomain(props));\n    const baseStyle = Object.assign({\n      cursor\n    }, fallbackProps.brushAreaStyle, brushAreaStyle);\n    const style = _victoryCore.Helpers.evaluateStyle(baseStyle, {\n      datum,\n      active: activeBrushes.brushArea\n    });\n    const brushAreaProps = Object.assign({\n      style\n    }, rectDimensions);\n    return /*#__PURE__*/_react.default.cloneElement(brushAreaComponent, brushAreaProps);\n  }\n  renderLine(props) {\n    const filteredProps = (0, _pick2.default)(props, [\"x1\", \"x2\", \"y1\", \"y2\", \"datum\", \"scale\", \"active\", \"style\"]);\n    return /*#__PURE__*/_react.default.cloneElement(props.lineComponent, filteredProps);\n  }\n  render() {\n    return /*#__PURE__*/_react.default.createElement(\"g\", this.props.events, this.renderLine(this.props), this.renderBrushArea(this.props), this.renderBrush(this.props), this.renderHandles(this.props));\n  }\n}\nexports.VictoryBrushLine = VictoryBrushLine;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/victory-brush-line/lib/victory-brush-line.js\n");

/***/ })

};
;