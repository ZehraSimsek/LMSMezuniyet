/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-router";
exports.ids = ["vendor-chunks/react-router"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-router/dist/main.js":
/*!************************************************!*\
  !*** ./node_modules/react-router/dist/main.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * React Router v6.22.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n\n/* eslint-env node */\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./umd/react-router.development.js */ \"(ssr)/./node_modules/react-router/dist/umd/react-router.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvbWFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViOztBQUVBLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBNkQ7QUFDL0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1wLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9kaXN0L21haW4uanM/MDIyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4yMi4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50LWVudiBub2RlICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi91bWQvcmVhY3Qtcm91dGVyLnByb2R1Y3Rpb24ubWluLmpzXCIpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi91bWQvcmVhY3Qtcm91dGVyLmRldmVsb3BtZW50LmpzXCIpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-router/dist/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-router/dist/umd/react-router.development.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-router/dist/umd/react-router.development.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/**\n * React Router v6.22.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), __webpack_require__(/*! @remix-run/router */ \"(ssr)/./node_modules/@remix-run/router/dist/router.cjs.js\")) :\n  0;\n})(this, (function (exports, React, router) { 'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () { return e[k]; }\n          });\n        }\n      });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n  }\n\n  var React__namespace = /*#__PURE__*/_interopNamespace(React);\n\n  function _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n\n  // Create react-specific types from the agnostic types in @remix-run/router to\n  // export from react-router\n  const DataRouterContext = /*#__PURE__*/React__namespace.createContext(null);\n  {\n    DataRouterContext.displayName = \"DataRouter\";\n  }\n  const DataRouterStateContext = /*#__PURE__*/React__namespace.createContext(null);\n  {\n    DataRouterStateContext.displayName = \"DataRouterState\";\n  }\n  const AwaitContext = /*#__PURE__*/React__namespace.createContext(null);\n  {\n    AwaitContext.displayName = \"Await\";\n  }\n\n  /**\n   * A Navigator is a \"location changer\"; it's how you get to different locations.\n   *\n   * Every history instance conforms to the Navigator interface, but the\n   * distinction is useful primarily when it comes to the low-level `<Router>` API\n   * where both the location and a navigator must be provided separately in order\n   * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n   * and/or location were to be read directly from the history instance.\n   */\n\n  const NavigationContext = /*#__PURE__*/React__namespace.createContext(null);\n  {\n    NavigationContext.displayName = \"Navigation\";\n  }\n  const LocationContext = /*#__PURE__*/React__namespace.createContext(null);\n  {\n    LocationContext.displayName = \"Location\";\n  }\n  const RouteContext = /*#__PURE__*/React__namespace.createContext({\n    outlet: null,\n    matches: [],\n    isDataRoute: false\n  });\n  {\n    RouteContext.displayName = \"Route\";\n  }\n  const RouteErrorContext = /*#__PURE__*/React__namespace.createContext(null);\n  {\n    RouteErrorContext.displayName = \"RouteError\";\n  }\n\n  /**\n   * Returns the full href for the given \"to\" value. This is useful for building\n   * custom links that are also accessible and preserve right-click behavior.\n   *\n   * @see https://reactrouter.com/hooks/use-href\n   */\n  function useHref(to, _temp) {\n    let {\n      relative\n    } = _temp === void 0 ? {} : _temp;\n    !useInRouterContext() ? router.UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    \"useHref() may be used only in the context of a <Router> component.\")  : void 0;\n    let {\n      basename,\n      navigator\n    } = React__namespace.useContext(NavigationContext);\n    let {\n      hash,\n      pathname,\n      search\n    } = useResolvedPath(to, {\n      relative\n    });\n    let joinedPathname = pathname;\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to creating the href.  If this is a root navigation, then just use the raw\n    // basename which allows the basename to have full control over the presence\n    // of a trailing slash on root links\n    if (basename !== \"/\") {\n      joinedPathname = pathname === \"/\" ? basename : router.joinPaths([basename, pathname]);\n    }\n    return navigator.createHref({\n      pathname: joinedPathname,\n      search,\n      hash\n    });\n  }\n\n  /**\n   * Returns true if this component is a descendant of a `<Router>`.\n   *\n   * @see https://reactrouter.com/hooks/use-in-router-context\n   */\n  function useInRouterContext() {\n    return React__namespace.useContext(LocationContext) != null;\n  }\n\n  /**\n   * Returns the current location object, which represents the current URL in web\n   * browsers.\n   *\n   * Note: If you're using this it may mean you're doing some of your own\n   * \"routing\" in your app, and we'd like to know what your use case is. We may\n   * be able to provide something higher-level to better suit your needs.\n   *\n   * @see https://reactrouter.com/hooks/use-location\n   */\n  function useLocation() {\n    !useInRouterContext() ? router.UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    \"useLocation() may be used only in the context of a <Router> component.\")  : void 0;\n    return React__namespace.useContext(LocationContext).location;\n  }\n\n  /**\n   * Returns the current navigation action which describes how the router came to\n   * the current location, either by a pop, push, or replace on the history stack.\n   *\n   * @see https://reactrouter.com/hooks/use-navigation-type\n   */\n  function useNavigationType() {\n    return React__namespace.useContext(LocationContext).navigationType;\n  }\n\n  /**\n   * Returns a PathMatch object if the given pattern matches the current URL.\n   * This is useful for components that need to know \"active\" state, e.g.\n   * `<NavLink>`.\n   *\n   * @see https://reactrouter.com/hooks/use-match\n   */\n  function useMatch(pattern) {\n    !useInRouterContext() ? router.UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    \"useMatch() may be used only in the context of a <Router> component.\")  : void 0;\n    let {\n      pathname\n    } = useLocation();\n    return React__namespace.useMemo(() => router.matchPath(pattern, pathname), [pathname, pattern]);\n  }\n\n  /**\n   * The interface for the navigate() function returned from useNavigate().\n   */\n\n  const navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n  // Mute warnings for calls to useNavigate in SSR environments\n  function useIsomorphicLayoutEffect(cb) {\n    let isStatic = React__namespace.useContext(NavigationContext).static;\n    if (!isStatic) {\n      // We should be able to get rid of this once react 18.3 is released\n      // See: https://github.com/facebook/react/pull/26395\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      React__namespace.useLayoutEffect(cb);\n    }\n  }\n\n  /**\n   * Returns an imperative method for changing the location. Used by `<Link>`s, but\n   * may also be used by other elements to change the location.\n   *\n   * @see https://reactrouter.com/hooks/use-navigate\n   */\n  function useNavigate() {\n    let {\n      isDataRoute\n    } = React__namespace.useContext(RouteContext);\n    // Conditional usage is OK here because the usage of a data router is static\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n  }\n  function useNavigateUnstable() {\n    !useInRouterContext() ? router.UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    \"useNavigate() may be used only in the context of a <Router> component.\")  : void 0;\n    let dataRouterContext = React__namespace.useContext(DataRouterContext);\n    let {\n      basename,\n      future,\n      navigator\n    } = React__namespace.useContext(NavigationContext);\n    let {\n      matches\n    } = React__namespace.useContext(RouteContext);\n    let {\n      pathname: locationPathname\n    } = useLocation();\n    let routePathnamesJson = JSON.stringify(router.UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n    let activeRef = React__namespace.useRef(false);\n    useIsomorphicLayoutEffect(() => {\n      activeRef.current = true;\n    });\n    let navigate = React__namespace.useCallback(function (to, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      router.UNSAFE_warning(activeRef.current, navigateEffectWarning) ;\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our history listener yet\n      if (!activeRef.current) return;\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n      let path = router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history (but only if we're not in a data router,\n      // otherwise it'll prepend the basename inside of the router).\n      // If this is a root navigation, then we navigate to the raw basename\n      // which allows the basename to have full control over the presence of a\n      // trailing slash on root links\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname = path.pathname === \"/\" ? basename : router.joinPaths([basename, path.pathname]);\n      }\n      (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n    }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n    return navigate;\n  }\n  const OutletContext = /*#__PURE__*/React__namespace.createContext(null);\n\n  /**\n   * Returns the context (if provided) for the child route at this level of the route\n   * hierarchy.\n   * @see https://reactrouter.com/hooks/use-outlet-context\n   */\n  function useOutletContext() {\n    return React__namespace.useContext(OutletContext);\n  }\n\n  /**\n   * Returns the element for the child route at this level of the route\n   * hierarchy. Used internally by `<Outlet>` to render child routes.\n   *\n   * @see https://reactrouter.com/hooks/use-outlet\n   */\n  function useOutlet(context) {\n    let outlet = React__namespace.useContext(RouteContext).outlet;\n    if (outlet) {\n      return /*#__PURE__*/React__namespace.createElement(OutletContext.Provider, {\n        value: context\n      }, outlet);\n    }\n    return outlet;\n  }\n\n  /**\n   * Returns an object of key/value pairs of the dynamic params from the current\n   * URL that were matched by the route path.\n   *\n   * @see https://reactrouter.com/hooks/use-params\n   */\n  function useParams() {\n    let {\n      matches\n    } = React__namespace.useContext(RouteContext);\n    let routeMatch = matches[matches.length - 1];\n    return routeMatch ? routeMatch.params : {};\n  }\n\n  /**\n   * Resolves the pathname of the given `to` value against the current location.\n   *\n   * @see https://reactrouter.com/hooks/use-resolved-path\n   */\n  function useResolvedPath(to, _temp2) {\n    let {\n      relative\n    } = _temp2 === void 0 ? {} : _temp2;\n    let {\n      future\n    } = React__namespace.useContext(NavigationContext);\n    let {\n      matches\n    } = React__namespace.useContext(RouteContext);\n    let {\n      pathname: locationPathname\n    } = useLocation();\n    let routePathnamesJson = JSON.stringify(router.UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n    return React__namespace.useMemo(() => router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n  }\n\n  /**\n   * Returns the element of the route that matched the current location, prepared\n   * with the correct context to render the remainder of the route tree. Route\n   * elements in the tree must render an `<Outlet>` to render their child route's\n   * element.\n   *\n   * @see https://reactrouter.com/hooks/use-routes\n   */\n  function useRoutes(routes, locationArg) {\n    return useRoutesImpl(routes, locationArg);\n  }\n\n  // Internal implementation with accept optional param for RouterProvider usage\n  function useRoutesImpl(routes, locationArg, dataRouterState, future) {\n    !useInRouterContext() ? router.UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    \"useRoutes() may be used only in the context of a <Router> component.\")  : void 0;\n    let {\n      navigator\n    } = React__namespace.useContext(NavigationContext);\n    let {\n      matches: parentMatches\n    } = React__namespace.useContext(RouteContext);\n    let routeMatch = parentMatches[parentMatches.length - 1];\n    let parentParams = routeMatch ? routeMatch.params : {};\n    let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n    let parentRoute = routeMatch && routeMatch.route;\n    {\n      // You won't get a warning about 2 different <Routes> under a <Route>\n      // without a trailing *, but this is a best-effort warning anyway since we\n      // cannot even give the warning unless they land at the parent route.\n      //\n      // Example:\n      //\n      // <Routes>\n      //   {/* This route path MUST end with /* because otherwise\n      //       it will never match /blog/post/123 */}\n      //   <Route path=\"blog\" element={<Blog />} />\n      //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n      // </Routes>\n      //\n      // function Blog() {\n      //   return (\n      //     <Routes>\n      //       <Route path=\"post/:id\" element={<Post />} />\n      //     </Routes>\n      //   );\n      // }\n      let parentPath = parentRoute && parentRoute.path || \"\";\n      warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n    }\n    let locationFromContext = useLocation();\n    let location;\n    if (locationArg) {\n      var _parsedLocationArg$pa;\n      let parsedLocationArg = typeof locationArg === \"string\" ? router.parsePath(locationArg) : locationArg;\n      !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? router.UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\"))  : void 0;\n      location = parsedLocationArg;\n    } else {\n      location = locationFromContext;\n    }\n    let pathname = location.pathname || \"/\";\n    let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n    let matches = router.matchRoutes(routes, {\n      pathname: remainingPathname\n    });\n    {\n      router.UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") ;\n      router.UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") ;\n    }\n    let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n      params: Object.assign({}, parentParams, match.params),\n      pathname: router.joinPaths([parentPathnameBase,\n      // Re-encode pathnames that were decoded inside matchRoutes\n      navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n      pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : router.joinPaths([parentPathnameBase,\n      // Re-encode pathnames that were decoded inside matchRoutes\n      navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n    })), parentMatches, dataRouterState, future);\n\n    // When a user passes in a `locationArg`, the associated routes need to\n    // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n    // to use the scoped location instead of the global location.\n    if (locationArg && renderedMatches) {\n      return /*#__PURE__*/React__namespace.createElement(LocationContext.Provider, {\n        value: {\n          location: _extends({\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\"\n          }, location),\n          navigationType: router.Action.Pop\n        }\n      }, renderedMatches);\n    }\n    return renderedMatches;\n  }\n  function DefaultErrorComponent() {\n    let error = useRouteError();\n    let message = router.isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n    let stack = error instanceof Error ? error.stack : null;\n    let lightgrey = \"rgba(200,200,200, 0.5)\";\n    let preStyles = {\n      padding: \"0.5rem\",\n      backgroundColor: lightgrey\n    };\n    let codeStyles = {\n      padding: \"2px 4px\",\n      backgroundColor: lightgrey\n    };\n    let devInfo = null;\n    {\n      console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n      devInfo = /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React__namespace.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React__namespace.createElement(\"code\", {\n        style: codeStyles\n      }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React__namespace.createElement(\"code\", {\n        style: codeStyles\n      }, \"errorElement\"), \" prop on your route.\"));\n    }\n    return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React__namespace.createElement(\"h3\", {\n      style: {\n        fontStyle: \"italic\"\n      }\n    }, message), stack ? /*#__PURE__*/React__namespace.createElement(\"pre\", {\n      style: preStyles\n    }, stack) : null, devInfo);\n  }\n  const defaultErrorElement = /*#__PURE__*/React__namespace.createElement(DefaultErrorComponent, null);\n  class RenderErrorBoundary extends React__namespace.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        location: props.location,\n        revalidation: props.revalidation,\n        error: props.error\n      };\n    }\n    static getDerivedStateFromError(error) {\n      return {\n        error: error\n      };\n    }\n    static getDerivedStateFromProps(props, state) {\n      // When we get into an error state, the user will likely click \"back\" to the\n      // previous page that didn't have an error. Because this wraps the entire\n      // application, that will have no effect--the error page continues to display.\n      // This gives us a mechanism to recover from the error when the location changes.\n      //\n      // Whether we're in an error state or not, we update the location in state\n      // so that when we are in an error state, it gets reset when a new location\n      // comes in and the user recovers from the error.\n      if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n        return {\n          error: props.error,\n          location: props.location,\n          revalidation: props.revalidation\n        };\n      }\n\n      // If we're not changing locations, preserve the location but still surface\n      // any new errors that may come through. We retain the existing error, we do\n      // this because the error provided from the app state may be cleared without\n      // the location changing.\n      return {\n        error: props.error !== undefined ? props.error : state.error,\n        location: state.location,\n        revalidation: props.revalidation || state.revalidation\n      };\n    }\n    componentDidCatch(error, errorInfo) {\n      console.error(\"React Router caught the following error during render\", error, errorInfo);\n    }\n    render() {\n      return this.state.error !== undefined ? /*#__PURE__*/React__namespace.createElement(RouteContext.Provider, {\n        value: this.props.routeContext\n      }, /*#__PURE__*/React__namespace.createElement(RouteErrorContext.Provider, {\n        value: this.state.error,\n        children: this.props.component\n      })) : this.props.children;\n    }\n  }\n  function RenderedRoute(_ref) {\n    let {\n      routeContext,\n      match,\n      children\n    } = _ref;\n    let dataRouterContext = React__namespace.useContext(DataRouterContext);\n\n    // Track how deep we got in our render pass to emulate SSR componentDidCatch\n    // in a DataStaticRouter\n    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n      dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n    }\n    return /*#__PURE__*/React__namespace.createElement(RouteContext.Provider, {\n      value: routeContext\n    }, children);\n  }\n  function _renderMatches(matches, parentMatches, dataRouterState, future) {\n    var _dataRouterState2;\n    if (parentMatches === void 0) {\n      parentMatches = [];\n    }\n    if (dataRouterState === void 0) {\n      dataRouterState = null;\n    }\n    if (future === void 0) {\n      future = null;\n    }\n    if (matches == null) {\n      var _dataRouterState;\n      if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {\n        // Don't bail if we have data router errors so we can render them in the\n        // boundary.  Use the pre-matched (or shimmed) matches\n        matches = dataRouterState.matches;\n      } else {\n        return null;\n      }\n    }\n    let renderedMatches = matches;\n\n    // If we have data errors, trim matches to the highest error boundary\n    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;\n    if (errors != null) {\n      let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\n      !(errorIndex >= 0) ? router.UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\"))  : void 0;\n      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n    }\n\n    // If we're in a partial hydration mode, detect if we need to render down to\n    // a given HydrateFallback while we load the rest of the hydration data\n    let renderFallback = false;\n    let fallbackIndex = -1;\n    if (dataRouterState && future && future.v7_partialHydration) {\n      for (let i = 0; i < renderedMatches.length; i++) {\n        let match = renderedMatches[i];\n        // Track the deepest fallback up until the first route without data\n        if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n          fallbackIndex = i;\n        }\n        if (match.route.id) {\n          let {\n            loaderData,\n            errors\n          } = dataRouterState;\n          let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n          if (match.route.lazy || needsToRunLoader) {\n            // We found the first route that's not ready to render (waiting on\n            // lazy, or has a loader that hasn't run yet).  Flag that we need to\n            // render a fallback and render up until the appropriate fallback\n            renderFallback = true;\n            if (fallbackIndex >= 0) {\n              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n            } else {\n              renderedMatches = [renderedMatches[0]];\n            }\n            break;\n          }\n        }\n      }\n    }\n    return renderedMatches.reduceRight((outlet, match, index) => {\n      // Only data routers handle errors/fallbacks\n      let error;\n      let shouldRenderHydrateFallback = false;\n      let errorElement = null;\n      let hydrateFallbackElement = null;\n      if (dataRouterState) {\n        error = errors && match.route.id ? errors[match.route.id] : undefined;\n        errorElement = match.route.errorElement || defaultErrorElement;\n        if (renderFallback) {\n          if (fallbackIndex < 0 && index === 0) {\n            warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n            shouldRenderHydrateFallback = true;\n            hydrateFallbackElement = null;\n          } else if (fallbackIndex === index) {\n            shouldRenderHydrateFallback = true;\n            hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n          }\n        }\n      }\n      let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n      let getChildren = () => {\n        let children;\n        if (error) {\n          children = errorElement;\n        } else if (shouldRenderHydrateFallback) {\n          children = hydrateFallbackElement;\n        } else if (match.route.Component) {\n          // Note: This is a de-optimized path since React won't re-use the\n          // ReactElement since it's identity changes with each new\n          // React.createElement call.  We keep this so folks can use\n          // `<Route Component={...}>` in `<Routes>` but generally `Component`\n          // usage is only advised in `RouterProvider` when we can convert it to\n          // `element` ahead of time.\n          children = /*#__PURE__*/React__namespace.createElement(match.route.Component, null);\n        } else if (match.route.element) {\n          children = match.route.element;\n        } else {\n          children = outlet;\n        }\n        return /*#__PURE__*/React__namespace.createElement(RenderedRoute, {\n          match: match,\n          routeContext: {\n            outlet,\n            matches,\n            isDataRoute: dataRouterState != null\n          },\n          children: children\n        });\n      };\n      // Only wrap in an error boundary within data router usages when we have an\n      // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n      // an ancestor ErrorBoundary/errorElement\n      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React__namespace.createElement(RenderErrorBoundary, {\n        location: dataRouterState.location,\n        revalidation: dataRouterState.revalidation,\n        component: errorElement,\n        error: error,\n        children: getChildren(),\n        routeContext: {\n          outlet: null,\n          matches,\n          isDataRoute: true\n        }\n      }) : getChildren();\n    }, null);\n  }\n  var DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n    DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n    DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n    DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n    return DataRouterHook;\n  }(DataRouterHook || {});\n  var DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n    DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n    DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n    DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n    DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n    DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n    DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n    DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n    DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n    DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n    DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n    return DataRouterStateHook;\n  }(DataRouterStateHook || {});\n  function getDataRouterConsoleError(hookName) {\n    return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n  }\n  function useDataRouterContext(hookName) {\n    let ctx = React__namespace.useContext(DataRouterContext);\n    !ctx ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName))  : void 0;\n    return ctx;\n  }\n  function useDataRouterState(hookName) {\n    let state = React__namespace.useContext(DataRouterStateContext);\n    !state ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName))  : void 0;\n    return state;\n  }\n  function useRouteContext(hookName) {\n    let route = React__namespace.useContext(RouteContext);\n    !route ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName))  : void 0;\n    return route;\n  }\n\n  // Internal version with hookName-aware debugging\n  function useCurrentRouteId(hookName) {\n    let route = useRouteContext(hookName);\n    let thisRoute = route.matches[route.matches.length - 1];\n    !thisRoute.route.id ? router.UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\")  : void 0;\n    return thisRoute.route.id;\n  }\n\n  /**\n   * Returns the ID for the nearest contextual route\n   */\n  function useRouteId() {\n    return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n  }\n\n  /**\n   * Returns the current navigation, defaulting to an \"idle\" navigation when\n   * no navigation is in progress\n   */\n  function useNavigation() {\n    let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n    return state.navigation;\n  }\n\n  /**\n   * Returns a revalidate function for manually triggering revalidation, as well\n   * as the current state of any manual revalidations\n   */\n  function useRevalidator() {\n    let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n    let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n    return React__namespace.useMemo(() => ({\n      revalidate: dataRouterContext.router.revalidate,\n      state: state.revalidation\n    }), [dataRouterContext.router.revalidate, state.revalidation]);\n  }\n\n  /**\n   * Returns the active route matches, useful for accessing loaderData for\n   * parent/child routes or the route \"handle\" property\n   */\n  function useMatches() {\n    let {\n      matches,\n      loaderData\n    } = useDataRouterState(DataRouterStateHook.UseMatches);\n    return React__namespace.useMemo(() => matches.map(m => router.UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n  }\n\n  /**\n   * Returns the loader data for the nearest ancestor Route loader\n   */\n  function useLoaderData() {\n    let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n    let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n    if (state.errors && state.errors[routeId] != null) {\n      console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n      return undefined;\n    }\n    return state.loaderData[routeId];\n  }\n\n  /**\n   * Returns the loaderData for the given routeId\n   */\n  function useRouteLoaderData(routeId) {\n    let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n    return state.loaderData[routeId];\n  }\n\n  /**\n   * Returns the action data for the nearest ancestor Route action\n   */\n  function useActionData() {\n    let state = useDataRouterState(DataRouterStateHook.UseActionData);\n    let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n    return state.actionData ? state.actionData[routeId] : undefined;\n  }\n\n  /**\n   * Returns the nearest ancestor Route error, which could be a loader/action\n   * error or a render error.  This is intended to be called from your\n   * ErrorBoundary/errorElement to display a proper error message.\n   */\n  function useRouteError() {\n    var _state$errors;\n    let error = React__namespace.useContext(RouteErrorContext);\n    let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n    // If this was a render error, we put it in a RouteError context inside\n    // of RenderErrorBoundary\n    if (error !== undefined) {\n      return error;\n    }\n\n    // Otherwise look for errors from our data router state\n    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n  }\n\n  /**\n   * Returns the happy-path data from the nearest ancestor `<Await />` value\n   */\n  function useAsyncValue() {\n    let value = React__namespace.useContext(AwaitContext);\n    return value == null ? void 0 : value._data;\n  }\n\n  /**\n   * Returns the error from the nearest ancestor `<Await />` value\n   */\n  function useAsyncError() {\n    let value = React__namespace.useContext(AwaitContext);\n    return value == null ? void 0 : value._error;\n  }\n  let blockerId = 0;\n\n  /**\n   * Allow the application to block navigations within the SPA and present the\n   * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n   * using half-filled form data.  This does not handle hard-reloads or\n   * cross-origin navigations.\n   */\n  function useBlocker(shouldBlock) {\n    let {\n      router: router$1,\n      basename\n    } = useDataRouterContext(DataRouterHook.UseBlocker);\n    let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n    let [blockerKey, setBlockerKey] = React__namespace.useState(\"\");\n    let blockerFunction = React__namespace.useCallback(arg => {\n      if (typeof shouldBlock !== \"function\") {\n        return !!shouldBlock;\n      }\n      if (basename === \"/\") {\n        return shouldBlock(arg);\n      }\n\n      // If they provided us a function and we've got an active basename, strip\n      // it from the locations we expose to the user to match the behavior of\n      // useLocation\n      let {\n        currentLocation,\n        nextLocation,\n        historyAction\n      } = arg;\n      return shouldBlock({\n        currentLocation: _extends({}, currentLocation, {\n          pathname: router.stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n        }),\n        nextLocation: _extends({}, nextLocation, {\n          pathname: router.stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n        }),\n        historyAction\n      });\n    }, [basename, shouldBlock]);\n\n    // This effect is in charge of blocker key assignment and deletion (which is\n    // tightly coupled to the key)\n    React__namespace.useEffect(() => {\n      let key = String(++blockerId);\n      setBlockerKey(key);\n      return () => router$1.deleteBlocker(key);\n    }, [router$1]);\n\n    // This effect handles assigning the blockerFunction.  This is to handle\n    // unstable blocker function identities, and happens only after the prior\n    // effect so we don't get an orphaned blockerFunction in the router with a\n    // key of \"\".  Until then we just have the IDLE_BLOCKER.\n    React__namespace.useEffect(() => {\n      if (blockerKey !== \"\") {\n        router$1.getBlocker(blockerKey, blockerFunction);\n      }\n    }, [router$1, blockerKey, blockerFunction]);\n\n    // Prefer the blocker from `state` not `router.state` since DataRouterContext\n    // is memoized so this ensures we update on blocker state updates\n    return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : router.IDLE_BLOCKER;\n  }\n\n  /**\n   * Stable version of useNavigate that is used when we are in the context of\n   * a RouterProvider.\n   */\n  function useNavigateStable() {\n    let {\n      router: router$1\n    } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n    let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n    let activeRef = React__namespace.useRef(false);\n    useIsomorphicLayoutEffect(() => {\n      activeRef.current = true;\n    });\n    let navigate = React__namespace.useCallback(function (to, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      router.UNSAFE_warning(activeRef.current, navigateEffectWarning) ;\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our router subscriber yet\n      if (!activeRef.current) return;\n      if (typeof to === \"number\") {\n        router$1.navigate(to);\n      } else {\n        router$1.navigate(to, _extends({\n          fromRouteId: id\n        }, options));\n      }\n    }, [router$1, id]);\n    return navigate;\n  }\n  const alreadyWarned = {};\n  function warningOnce(key, cond, message) {\n    if (!cond && !alreadyWarned[key]) {\n      alreadyWarned[key] = true;\n      router.UNSAFE_warning(false, message) ;\n    }\n  }\n\n  /**\n    Webpack + React 17 fails to compile on any of the following because webpack\n    complains that `startTransition` doesn't exist in `React`:\n    * import { startTransition } from \"react\"\n    * import * as React from from \"react\";\n      \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n    * import * as React from from \"react\";\n      \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n    Moving it to a constant such as the following solves the Webpack/React 17 issue:\n    * import * as React from from \"react\";\n      const START_TRANSITION = \"startTransition\";\n      START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n    However, that introduces webpack/terser minification issues in production builds\n    in React 18 where minification/obfuscation ends up removing the call of\n    React.startTransition entirely from the first half of the ternary.  Grabbing\n    this exported reference once up front resolves that issue.\n\n    See https://github.com/remix-run/react-router/issues/10579\n  */\n  const START_TRANSITION = \"startTransition\";\n  const startTransitionImpl = React__namespace[START_TRANSITION];\n\n  /**\n   * Given a Remix Router instance, render the appropriate UI\n   */\n  function RouterProvider(_ref) {\n    let {\n      fallbackElement,\n      router: router$1,\n      future\n    } = _ref;\n    let [state, setStateImpl] = React__namespace.useState(router$1.state);\n    let {\n      v7_startTransition\n    } = future || {};\n    let setState = React__namespace.useCallback(newState => {\n      if (v7_startTransition && startTransitionImpl) {\n        startTransitionImpl(() => setStateImpl(newState));\n      } else {\n        setStateImpl(newState);\n      }\n    }, [setStateImpl, v7_startTransition]);\n\n    // Need to use a layout effect here so we are subscribed early enough to\n    // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n    React__namespace.useLayoutEffect(() => router$1.subscribe(setState), [router$1, setState]);\n    React__namespace.useEffect(() => {\n      router.UNSAFE_warning(fallbackElement == null || !router$1.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") ;\n      // Only log this once on initial mount\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    let navigator = React__namespace.useMemo(() => {\n      return {\n        createHref: router$1.createHref,\n        encodeLocation: router$1.encodeLocation,\n        go: n => router$1.navigate(n),\n        push: (to, state, opts) => router$1.navigate(to, {\n          state,\n          preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n        }),\n        replace: (to, state, opts) => router$1.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n        })\n      };\n    }, [router$1]);\n    let basename = router$1.basename || \"/\";\n    let dataRouterContext = React__namespace.useMemo(() => ({\n      router: router$1,\n      navigator,\n      static: false,\n      basename\n    }), [router$1, navigator, basename]);\n\n    // The fragment and {null} here are important!  We need them to keep React 18's\n    // useId happy when we are server-rendering since we may have a <script> here\n    // containing the hydrated server-side staticContext (from StaticRouterProvider).\n    // useId relies on the component tree structure to generate deterministic id's\n    // so we need to ensure it remains the same on the client even though\n    // we don't need the <script> tag\n    return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(DataRouterContext.Provider, {\n      value: dataRouterContext\n    }, /*#__PURE__*/React__namespace.createElement(DataRouterStateContext.Provider, {\n      value: state\n    }, /*#__PURE__*/React__namespace.createElement(Router, {\n      basename: basename,\n      location: state.location,\n      navigationType: state.historyAction,\n      navigator: navigator,\n      future: {\n        v7_relativeSplatPath: router$1.future.v7_relativeSplatPath\n      }\n    }, state.initialized || router$1.future.v7_partialHydration ? /*#__PURE__*/React__namespace.createElement(DataRoutes, {\n      routes: router$1.routes,\n      future: router$1.future,\n      state: state\n    }) : fallbackElement))), null);\n  }\n  function DataRoutes(_ref2) {\n    let {\n      routes,\n      future,\n      state\n    } = _ref2;\n    return useRoutesImpl(routes, undefined, state, future);\n  }\n  /**\n   * A `<Router>` that stores all entries in memory.\n   *\n   * @see https://reactrouter.com/router-components/memory-router\n   */\n  function MemoryRouter(_ref3) {\n    let {\n      basename,\n      children,\n      initialEntries,\n      initialIndex,\n      future\n    } = _ref3;\n    let historyRef = React__namespace.useRef();\n    if (historyRef.current == null) {\n      historyRef.current = router.createMemoryHistory({\n        initialEntries,\n        initialIndex,\n        v5Compat: true\n      });\n    }\n    let history = historyRef.current;\n    let [state, setStateImpl] = React__namespace.useState({\n      action: history.action,\n      location: history.location\n    });\n    let {\n      v7_startTransition\n    } = future || {};\n    let setState = React__namespace.useCallback(newState => {\n      v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n    }, [setStateImpl, v7_startTransition]);\n    React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);\n    return /*#__PURE__*/React__namespace.createElement(Router, {\n      basename: basename,\n      children: children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history,\n      future: future\n    });\n  }\n  /**\n   * Changes the current location.\n   *\n   * Note: This API is mostly useful in React.Component subclasses that are not\n   * able to use hooks. In functional components, we recommend you use the\n   * `useNavigate` hook instead.\n   *\n   * @see https://reactrouter.com/components/navigate\n   */\n  function Navigate(_ref4) {\n    let {\n      to,\n      replace,\n      state,\n      relative\n    } = _ref4;\n    !useInRouterContext() ? router.UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    \"<Navigate> may be used only in the context of a <Router> component.\")  : void 0;\n    let {\n      future,\n      static: isStatic\n    } = React__namespace.useContext(NavigationContext);\n    router.UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") ;\n    let {\n      matches\n    } = React__namespace.useContext(RouteContext);\n    let {\n      pathname: locationPathname\n    } = useLocation();\n    let navigate = useNavigate();\n\n    // Resolve the path outside of the effect so that when effects run twice in\n    // StrictMode they navigate to the same place\n    let path = router.resolveTo(to, router.UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n    let jsonPath = JSON.stringify(path);\n    React__namespace.useEffect(() => navigate(JSON.parse(jsonPath), {\n      replace,\n      state,\n      relative\n    }), [navigate, jsonPath, relative, replace, state]);\n    return null;\n  }\n  /**\n   * Renders the child route's element, if there is one.\n   *\n   * @see https://reactrouter.com/components/outlet\n   */\n  function Outlet(props) {\n    return useOutlet(props.context);\n  }\n  /**\n   * Declares an element that should be rendered at a certain URL path.\n   *\n   * @see https://reactrouter.com/components/route\n   */\n  function Route(_props) {\n    router.UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\")  ;\n  }\n  /**\n   * Provides location context for the rest of the app.\n   *\n   * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n   * router that is more specific to your environment such as a `<BrowserRouter>`\n   * in web browsers or a `<StaticRouter>` for server rendering.\n   *\n   * @see https://reactrouter.com/router-components/router\n   */\n  function Router(_ref5) {\n    let {\n      basename: basenameProp = \"/\",\n      children = null,\n      location: locationProp,\n      navigationType = router.Action.Pop,\n      navigator,\n      static: staticProp = false,\n      future\n    } = _ref5;\n    !!useInRouterContext() ? router.UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\")  : void 0;\n\n    // Preserve trailing slashes on basename, so we can let the user control\n    // the enforcement of trailing slashes throughout the app\n    let basename = basenameProp.replace(/^\\/*/, \"/\");\n    let navigationContext = React__namespace.useMemo(() => ({\n      basename,\n      navigator,\n      static: staticProp,\n      future: _extends({\n        v7_relativeSplatPath: false\n      }, future)\n    }), [basename, future, navigator, staticProp]);\n    if (typeof locationProp === \"string\") {\n      locationProp = router.parsePath(locationProp);\n    }\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n      state = null,\n      key = \"default\"\n    } = locationProp;\n    let locationContext = React__namespace.useMemo(() => {\n      let trailingPathname = router.stripBasename(pathname, basename);\n      if (trailingPathname == null) {\n        return null;\n      }\n      return {\n        location: {\n          pathname: trailingPathname,\n          search,\n          hash,\n          state,\n          key\n        },\n        navigationType\n      };\n    }, [basename, pathname, search, hash, state, key, navigationType]);\n    router.UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") ;\n    if (locationContext == null) {\n      return null;\n    }\n    return /*#__PURE__*/React__namespace.createElement(NavigationContext.Provider, {\n      value: navigationContext\n    }, /*#__PURE__*/React__namespace.createElement(LocationContext.Provider, {\n      children: children,\n      value: locationContext\n    }));\n  }\n  /**\n   * A container for a nested tree of `<Route>` elements that renders the branch\n   * that best matches the current location.\n   *\n   * @see https://reactrouter.com/components/routes\n   */\n  function Routes(_ref6) {\n    let {\n      children,\n      location\n    } = _ref6;\n    return useRoutes(createRoutesFromChildren(children), location);\n  }\n  /**\n   * Component to use for rendering lazily loaded data from returning defer()\n   * in a loader function\n   */\n  function Await(_ref7) {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = _ref7;\n    return /*#__PURE__*/React__namespace.createElement(AwaitErrorBoundary, {\n      resolve: resolve,\n      errorElement: errorElement\n    }, /*#__PURE__*/React__namespace.createElement(ResolveAwait, null, children));\n  }\n  var AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n    AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n    AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n    AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n    return AwaitRenderStatus;\n  }(AwaitRenderStatus || {});\n  const neverSettledPromise = new Promise(() => {});\n  class AwaitErrorBoundary extends React__namespace.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null\n      };\n    }\n    static getDerivedStateFromError(error) {\n      return {\n        error\n      };\n    }\n    componentDidCatch(error, errorInfo) {\n      console.error(\"<Await> caught the following error during render\", error, errorInfo);\n    }\n    render() {\n      let {\n        children,\n        errorElement,\n        resolve\n      } = this.props;\n      let promise = null;\n      let status = AwaitRenderStatus.pending;\n      if (!(resolve instanceof Promise)) {\n        // Didn't get a promise - provide as a resolved promise\n        status = AwaitRenderStatus.success;\n        promise = Promise.resolve();\n        Object.defineProperty(promise, \"_tracked\", {\n          get: () => true\n        });\n        Object.defineProperty(promise, \"_data\", {\n          get: () => resolve\n        });\n      } else if (this.state.error) {\n        // Caught a render error, provide it as a rejected promise\n        status = AwaitRenderStatus.error;\n        let renderError = this.state.error;\n        promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n        Object.defineProperty(promise, \"_tracked\", {\n          get: () => true\n        });\n        Object.defineProperty(promise, \"_error\", {\n          get: () => renderError\n        });\n      } else if (resolve._tracked) {\n        // Already tracked promise - check contents\n        promise = resolve;\n        status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n      } else {\n        // Raw (untracked) promise - track it\n        status = AwaitRenderStatus.pending;\n        Object.defineProperty(resolve, \"_tracked\", {\n          get: () => true\n        });\n        promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n          get: () => data\n        }), error => Object.defineProperty(resolve, \"_error\", {\n          get: () => error\n        }));\n      }\n      if (status === AwaitRenderStatus.error && promise._error instanceof router.AbortedDeferredError) {\n        // Freeze the UI by throwing a never resolved promise\n        throw neverSettledPromise;\n      }\n      if (status === AwaitRenderStatus.error && !errorElement) {\n        // No errorElement, throw to the nearest route-level error boundary\n        throw promise._error;\n      }\n      if (status === AwaitRenderStatus.error) {\n        // Render via our errorElement\n        return /*#__PURE__*/React__namespace.createElement(AwaitContext.Provider, {\n          value: promise,\n          children: errorElement\n        });\n      }\n      if (status === AwaitRenderStatus.success) {\n        // Render children with resolved value\n        return /*#__PURE__*/React__namespace.createElement(AwaitContext.Provider, {\n          value: promise,\n          children: children\n        });\n      }\n\n      // Throw to the suspense boundary\n      throw promise;\n    }\n  }\n\n  /**\n   * @private\n   * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n   */\n  function ResolveAwait(_ref8) {\n    let {\n      children\n    } = _ref8;\n    let data = useAsyncValue();\n    let toRender = typeof children === \"function\" ? children(data) : children;\n    return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, toRender);\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////\n  // UTILS\n  ///////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Creates a route config from a React \"children\" object, which is usually\n   * either a `<Route>` element or an array of them. Used internally by\n   * `<Routes>` to create a route config from its children.\n   *\n   * @see https://reactrouter.com/utils/create-routes-from-children\n   */\n  function createRoutesFromChildren(children, parentPath) {\n    if (parentPath === void 0) {\n      parentPath = [];\n    }\n    let routes = [];\n    React__namespace.Children.forEach(children, (element, index) => {\n      if (! /*#__PURE__*/React__namespace.isValidElement(element)) {\n        // Ignore non-elements. This allows people to more easily inline\n        // conditionals in their route config.\n        return;\n      }\n      let treePath = [...parentPath, index];\n      if (element.type === React__namespace.Fragment) {\n        // Transparently support React.Fragment and its children.\n        routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n        return;\n      }\n      !(element.type === Route) ? router.UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\")  : void 0;\n      !(!element.props.index || !element.props.children) ? router.UNSAFE_invariant(false, \"An index route cannot have child routes.\")  : void 0;\n      let route = {\n        id: element.props.id || treePath.join(\"-\"),\n        caseSensitive: element.props.caseSensitive,\n        element: element.props.element,\n        Component: element.props.Component,\n        index: element.props.index,\n        path: element.props.path,\n        loader: element.props.loader,\n        action: element.props.action,\n        errorElement: element.props.errorElement,\n        ErrorBoundary: element.props.ErrorBoundary,\n        hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n        shouldRevalidate: element.props.shouldRevalidate,\n        handle: element.props.handle,\n        lazy: element.props.lazy\n      };\n      if (element.props.children) {\n        route.children = createRoutesFromChildren(element.props.children, treePath);\n      }\n      routes.push(route);\n    });\n    return routes;\n  }\n\n  /**\n   * Renders the result of `matchRoutes()` into a React element.\n   */\n  function renderMatches(matches) {\n    return _renderMatches(matches);\n  }\n\n  function mapRouteProperties(route) {\n    let updates = {\n      // Note: this check also occurs in createRoutesFromChildren so update\n      // there if you change this -- please and thank you!\n      hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n    };\n    if (route.Component) {\n      {\n        if (route.element) {\n          router.UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") ;\n        }\n      }\n      Object.assign(updates, {\n        element: /*#__PURE__*/React__namespace.createElement(route.Component),\n        Component: undefined\n      });\n    }\n    if (route.HydrateFallback) {\n      {\n        if (route.hydrateFallbackElement) {\n          router.UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") ;\n        }\n      }\n      Object.assign(updates, {\n        hydrateFallbackElement: /*#__PURE__*/React__namespace.createElement(route.HydrateFallback),\n        HydrateFallback: undefined\n      });\n    }\n    if (route.ErrorBoundary) {\n      {\n        if (route.errorElement) {\n          router.UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") ;\n        }\n      }\n      Object.assign(updates, {\n        errorElement: /*#__PURE__*/React__namespace.createElement(route.ErrorBoundary),\n        ErrorBoundary: undefined\n      });\n    }\n    return updates;\n  }\n  function createMemoryRouter(routes, opts) {\n    return router.createRouter({\n      basename: opts == null ? void 0 : opts.basename,\n      future: _extends({}, opts == null ? void 0 : opts.future, {\n        v7_prependBasename: true\n      }),\n      history: router.createMemoryHistory({\n        initialEntries: opts == null ? void 0 : opts.initialEntries,\n        initialIndex: opts == null ? void 0 : opts.initialIndex\n      }),\n      hydrationData: opts == null ? void 0 : opts.hydrationData,\n      routes,\n      mapRouteProperties\n    }).initialize();\n  }\n\n  Object.defineProperty(exports, 'AbortedDeferredError', {\n    enumerable: true,\n    get: function () { return router.AbortedDeferredError; }\n  });\n  Object.defineProperty(exports, 'NavigationType', {\n    enumerable: true,\n    get: function () { return router.Action; }\n  });\n  Object.defineProperty(exports, 'createPath', {\n    enumerable: true,\n    get: function () { return router.createPath; }\n  });\n  Object.defineProperty(exports, 'defer', {\n    enumerable: true,\n    get: function () { return router.defer; }\n  });\n  Object.defineProperty(exports, 'generatePath', {\n    enumerable: true,\n    get: function () { return router.generatePath; }\n  });\n  Object.defineProperty(exports, 'isRouteErrorResponse', {\n    enumerable: true,\n    get: function () { return router.isRouteErrorResponse; }\n  });\n  Object.defineProperty(exports, 'json', {\n    enumerable: true,\n    get: function () { return router.json; }\n  });\n  Object.defineProperty(exports, 'matchPath', {\n    enumerable: true,\n    get: function () { return router.matchPath; }\n  });\n  Object.defineProperty(exports, 'matchRoutes', {\n    enumerable: true,\n    get: function () { return router.matchRoutes; }\n  });\n  Object.defineProperty(exports, 'parsePath', {\n    enumerable: true,\n    get: function () { return router.parsePath; }\n  });\n  Object.defineProperty(exports, 'redirect', {\n    enumerable: true,\n    get: function () { return router.redirect; }\n  });\n  Object.defineProperty(exports, 'redirectDocument', {\n    enumerable: true,\n    get: function () { return router.redirectDocument; }\n  });\n  Object.defineProperty(exports, 'resolvePath', {\n    enumerable: true,\n    get: function () { return router.resolvePath; }\n  });\n  exports.Await = Await;\n  exports.MemoryRouter = MemoryRouter;\n  exports.Navigate = Navigate;\n  exports.Outlet = Outlet;\n  exports.Route = Route;\n  exports.Router = Router;\n  exports.RouterProvider = RouterProvider;\n  exports.Routes = Routes;\n  exports.UNSAFE_DataRouterContext = DataRouterContext;\n  exports.UNSAFE_DataRouterStateContext = DataRouterStateContext;\n  exports.UNSAFE_LocationContext = LocationContext;\n  exports.UNSAFE_NavigationContext = NavigationContext;\n  exports.UNSAFE_RouteContext = RouteContext;\n  exports.UNSAFE_mapRouteProperties = mapRouteProperties;\n  exports.UNSAFE_useRouteId = useRouteId;\n  exports.UNSAFE_useRoutesImpl = useRoutesImpl;\n  exports.createMemoryRouter = createMemoryRouter;\n  exports.createRoutesFromChildren = createRoutesFromChildren;\n  exports.createRoutesFromElements = createRoutesFromChildren;\n  exports.renderMatches = renderMatches;\n  exports.useActionData = useActionData;\n  exports.useAsyncError = useAsyncError;\n  exports.useAsyncValue = useAsyncValue;\n  exports.useBlocker = useBlocker;\n  exports.useHref = useHref;\n  exports.useInRouterContext = useInRouterContext;\n  exports.useLoaderData = useLoaderData;\n  exports.useLocation = useLocation;\n  exports.useMatch = useMatch;\n  exports.useMatches = useMatches;\n  exports.useNavigate = useNavigate;\n  exports.useNavigation = useNavigation;\n  exports.useNavigationType = useNavigationType;\n  exports.useOutlet = useOutlet;\n  exports.useOutletContext = useOutletContext;\n  exports.useParams = useParams;\n  exports.useResolvedPath = useResolvedPath;\n  exports.useRevalidator = useRevalidator;\n  exports.useRouteError = useRouteError;\n  exports.useRouteLoaderData = useRouteLoaderData;\n  exports.useRoutes = useRoutes;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=react-router.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-router/dist/umd/react-router.development.js\n");

/***/ })

};
;